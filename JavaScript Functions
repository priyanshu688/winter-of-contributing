◆ JavaScript Functions

JavaScript generally provide us the functions similar to the most of the scripting and programming languages. In JavaScript, A function allows you to define a block of code, give it a name and then execute it as many time as you want.

→ Points:- 
A JavaScript function is a block of code designed to perform a particular task.
A JavaScript function is executed when "something" invokes it (calls it).

For ex - function myFunction(p1, p2) {
          return p1 * p2;   // The function returns the product of p1 and p2
        }
        

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

• JavaScript Function Syntax

A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().
Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)

The code to be executed, by the function, is placed inside curly brackets: {}

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function parameters are listed inside the parentheses () in the function definition.
Function arguments are the values received by the function when it is invoked.

Inside the function, the arguments (the parameters) behave as local variables.  

► Following are the different types of functions in JavaScript - 
1. Function Declaration.
2. Function Expression.
3. Shorthand Method Definition.
4. Arrow Function.
5. Generator Function

• Function Invocation

The code inside the function will execute when "something" invokes (calls) the function:-

⇛ When an event occurs (when a user clicks a button)
⇛ When it is invoked (called) from JavaScript code.
⇛ Automatically (self invoked)

• Function Return

When JavaScript reaches a return statement, the function will stop executing.
If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.

Functions often compute a return value. The return value is "returned" back to the "caller":

Lets take an example - 

Calculate the product of two numbers, and return the result:
let x = myFunction(4, 3);   // Function is called, return value will end up in x

function myFunction(a, b) {
  return a * b;             // Function returns the product of a and b
}

• The () Operator Invokes the Function
Here, toCelsius refers to the function object, and toCelsius() refers to the function result.

Accessing a function without () will return the function object instead of the function result.

For Example - 

function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}
document.getElementById("demo").innerHTML = toCelsius;

• Functions Used as Variable Values
Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.

For Example - 
Instead of using a variable to store the return value of a function:

let x = toCelsius(77);
let text = "The temperature is " + x + " Celsius";
You can use the function directly, as a variable value:

let text = "The temperature is " + toCelsius(77) + " Celsius";

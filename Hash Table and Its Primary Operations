◆ Hash Table and Its Primary Operations

◆ Hash Table 
      → Hash Table is a data structure that is basically used to store key/value pairs.
      → Hash Table is a special collection that is used to store key/value items.
      → Hash Table implements an associative array abstract data type, a structure that can map keys to values.
   
▪ A Hash Table basically uses a hash function to compute an index, also called a Hash Code, into an array of buckets or slots, from which the desired value can be found.
▪ In a hash table, data is stored in an array format, where each data value has its own unique index value. Access of data becomes very fast if we know the index of the desired data.
▪ Thus, it becomes a data structure in which insertion and search operations are very fast irrespective of the size of the data.
▪ Hash Table uses an array as a storage medium and uses hash technique to generate an index where an element is to be inserted or is to be located from.

► Advantages:-
   → One of the main advantages of hash tables over other data structure is "SPEED". The access time of an element is on average O(1). therefore lookup could be performed very fast.
   
► Following are the basic primary operations of a hash table :-

     1. Search Operation - It Searches an element in a hash table. Whenever an element is to be searched, compute the hash code of the key passed and locate the element using that hash code as index in the array. Use linear probing to get the element ahead if the element is not found at the computed hash code.
          Let's see an example - struct DataItem *search(int key) {
                                    //get the hash
                                  int hashIndex = hashCode(key);
	
                                    //move in array until an empty
                                  while(hashArray[hashIndex] != NULL) {
	
                                     if(hashArray[hashIndex]->key == key)
                                       return hashArray[hashIndex];
			
                                     //go to next cell
                                         ++hashIndex;
		
                                     //wrap around the table
                                           hashIndex %= SIZE;
                                   }
                                    return NULL;        
                                 }
                                 
    2. Insertion Operation − It inserts an element in a hash table. Whenever an element is to be inserted, compute the hash code of the key passed and locate the index using that hash code as an index in the array. Use linear probing for empty location, if an element is found at the computed hash code.
           Let's see an example - void insert(int key,int data) {
                                    struct DataItem *item = (struct DataItem*) malloc(sizeof(struct DataItem));
                                    item->data = data;  
                                    item->key = key;     

                                    //get the hash 
                                     int hashIndex = hashCode(key);

                                    //move in array until an empty or deleted cell
                                    while(hashArray[hashIndex] != NULL && hashArray[hashIndex]->key != -1) {
                                    //go to next cell
                                        ++hashIndex;
		                                //wrap around the table
                                          hashIndex %= SIZE;
                                    }
                                      hashArray[hashIndex] = item;        
                                    }
        
   3. Deletion Operation - It deletes an element from a hash table. Whenever an element is to be deleted, compute the hash code of the key passed and locate the index using that hash code as an index in the array. Use linear probing to get the element ahead if an element is not found at the computed hash code. When found, store a dummy item there to keep the performance of the hash table intact.
        Let's see an example - struct DataItem* delete(struct DataItem* item) {
                                        int key = item->key;
                                          //get the hash 
                                            int hashIndex = hashCode(key);
                                          //move in array until an empty 
                                             while(hashArray[hashIndex] !=NULL) {
	
                                          if(hashArray[hashIndex]->key == key) {
                                              struct DataItem* temp = hashArray[hashIndex]; 
			
                                                 //assign a dummy item at deleted position
                                                   hashArray[hashIndex] = dummyItem; 
                                                     return temp;
                                                } 
		                                              //go to next cell
                                                     ++hashIndex;
		                                              //wrap around the table
                                                       hashIndex %= SIZE;
                                            }  
	                                                 return NULL;        
                                         }
   
